/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.PoorPeopleRole;

import Business.CountryEnterprise.CountryEnterprise;
import Business.CountryEnterprise.RegSiteEnterprise.RegisteredSiteEnterprise;
import Business.Helper.AuthenticateUser;
import Business.Helper.CardLayoutContainer;
import Business.Helper.UserNameExists;
import Business.Helper.Validation;
import Business.Person.Person;
import Business.Role.Role;
import Business.Transaction.Transaction;
import Business.UserAccount.UserAccount;
import Business.WorldEnterprise;
import java.math.BigDecimal;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author "Smit Shah, NUID: 001748537, AED - Final Project"
 */
public class MoneyTransferJPanel extends javax.swing.JPanel {

    /**
     * Creates new form MoneyTransferJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount objSenderUserAccount;
    private WorldEnterprise objWorldEnterprise;
    private CountryEnterprise objCountryEnterprise;
    private String transactionType, userName, password, pin, transferAmount, receiverUserName;
    private BigDecimal amount, availableBalance;

    public MoneyTransferJPanel(JPanel userProcessContainerPassed, UserAccount objUserAccountPassed,
            WorldEnterprise objWorldEnterprisePassed, CountryEnterprise objCountryEnterprisePassed,
            String transactionTypePassed) {

        initComponents();
        this.userProcessContainer = userProcessContainerPassed;
        this.objSenderUserAccount = objUserAccountPassed;
        this.objWorldEnterprise = objWorldEnterprisePassed;
        this.objCountryEnterprise = objCountryEnterprisePassed;
        this.transactionType = transactionTypePassed;

        if (transactionTypePassed.equals(Transaction.TransactionSourceType.ToPoorPeople.getValue())) {
            regSiteJLabel.setVisible(false);
            regSiteJComboBox.setVisible(false);

            receiverUserNameJLabel.setVisible(true);
            receiverUserNameJTextField.setVisible(true);
        }

        if (transactionTypePassed.equals(Transaction.TransactionSourceType.ToRegSiteEnterprise.getValue())) {
            regSiteJLabel.setVisible(true);
            regSiteJComboBox.setVisible(true);

            receiverUserNameJLabel.setVisible(false);
            receiverUserNameJTextField.setVisible(false);

            populateRegSiteComboBox();
        }

        dollarJLabel.setEnabled(false);
        regSiteJComboBox.setEnabled(false);
        receiverUserNameJTextField.setEnabled(false);
        pinJPasswordField.setEnabled(false);
        amountJTextField.setEnabled(false);
        transferJButton.setEnabled(false);

    }

    private void populateRegSiteComboBox() {

        regSiteJComboBox.removeAllItems();

        for (RegisteredSiteEnterprise objRegisteredSiteEnterprise : objCountryEnterprise.getObjRegisteredSiteDirectory().getRegisteredSiteList()) {

            regSiteJComboBox.addItem(objRegisteredSiteEnterprise);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleJLabel = new javax.swing.JLabel();
        userNameJLabel = new javax.swing.JLabel();
        userNameJTextField = new javax.swing.JTextField();
        passJLabel = new javax.swing.JLabel();
        mainJPasswordField = new javax.swing.JPasswordField();
        validateJButton = new javax.swing.JButton();
        receiverUserNameJLabel = new javax.swing.JLabel();
        receiverUserNameJTextField = new javax.swing.JTextField();
        pinJLabel = new javax.swing.JLabel();
        pinJPasswordField = new javax.swing.JPasswordField();
        transferJButton = new javax.swing.JButton();
        transferAmtJLabel = new javax.swing.JLabel();
        amountJTextField = new javax.swing.JTextField();
        backJButton5 = new javax.swing.JButton();
        regSiteJLabel = new javax.swing.JLabel();
        regSiteJComboBox = new javax.swing.JComboBox();
        dollarJLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        titleJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        titleJLabel.setText("Money Transfer");

        userNameJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        userNameJLabel.setText("User Name");

        userNameJTextField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        passJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        passJLabel.setText("Password");

        mainJPasswordField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        validateJButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        validateJButton.setText("Validate");
        validateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validateJButtonActionPerformed(evt);
            }
        });

        receiverUserNameJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        receiverUserNameJLabel.setText("Receiver User Name");
        receiverUserNameJLabel.setOpaque(true);

        receiverUserNameJTextField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        receiverUserNameJTextField.setEnabled(false);

        pinJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        pinJLabel.setText("PIN ");

        pinJPasswordField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        pinJPasswordField.setEnabled(false);

        transferJButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        transferJButton.setText("Transfer");
        transferJButton.setEnabled(false);
        transferJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferJButtonActionPerformed(evt);
            }
        });

        transferAmtJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        transferAmtJLabel.setText("Transfer Amount");

        amountJTextField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        amountJTextField.setEnabled(false);

        backJButton5.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        backJButton5.setText("<< Back");
        backJButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButton5ActionPerformed(evt);
            }
        });

        regSiteJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        regSiteJLabel.setText("Reistered Site Name");
        regSiteJLabel.setOpaque(true);

        regSiteJComboBox.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        regSiteJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regSiteJComboBoxActionPerformed(evt);
            }
        });

        dollarJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        dollarJLabel.setText("$");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(regSiteJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(passJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(userNameJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(receiverUserNameJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(transferAmtJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pinJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addComponent(dollarJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(transferJButton, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                            .addComponent(pinJPasswordField)
                            .addComponent(amountJTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(userNameJTextField)
                            .addComponent(mainJPasswordField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(validateJButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                            .addComponent(receiverUserNameJTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(regSiteJComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(backJButton5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(318, 318, 318)
                        .addComponent(titleJLabel)))
                .addGap(202, 202, 202))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(titleJLabel)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(userNameJLabel)
                        .addGap(29, 29, 29)
                        .addComponent(passJLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(userNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
                        .addComponent(mainJPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(validateJButton)
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(regSiteJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(regSiteJLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(receiverUserNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(receiverUserNameJLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(amountJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(transferAmtJLabel)
                            .addComponent(dollarJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pinJPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pinJLabel))))
                .addGap(18, 18, 18)
                .addComponent(transferJButton)
                .addGap(100, 100, 100)
                .addComponent(backJButton5)
                .addContainerGap(112, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void validateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validateJButtonActionPerformed

        //Validation
        boolean validationSuccess;
        validationSuccess = validationLogin();

        if (validationSuccess) {

            UserAccount objCheckUserAccount = AuthenticateUser.authenticateUser(objWorldEnterprise, userName, password);

            if (objCheckUserAccount != null) {

                if (objCheckUserAccount.getUserName().equals(objSenderUserAccount.getUserName())) {

                    dollarJLabel.setEnabled(true);
                    regSiteJComboBox.setEnabled(true);
                    receiverUserNameJTextField.setEnabled(true);
                    pinJPasswordField.setEnabled(true);
                    amountJTextField.setEnabled(true);
                    transferJButton.setEnabled(true);

                } else {
                    JOptionPane.showMessageDialog(null, "Please enter your cedentials");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please enter valid credentials");
            }
        }
    }//GEN-LAST:event_validateJButtonActionPerformed

    private boolean validationLogin() {

        userName = userNameJTextField.getText().trim();
        password = String.valueOf(mainJPasswordField.getPassword());

        if (Validation.checkForNull(userName)) {
            JOptionPane.showMessageDialog(null, "Please enter username");
            userNameJTextField.requestFocus();
            return false;
        }

        if (Validation.checkForNull(password)) {
            JOptionPane.showMessageDialog(null, "Please enter password");
            mainJPasswordField.requestFocus();
            return false;
        }

        return true;
    }


    private void transferJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transferJButtonActionPerformed

        //Validation
        boolean validationSuccess;
        validationSuccess = validationTransfer();

        if (validationSuccess) {
            availableBalance = objSenderUserAccount.getObjPerson().getObjPoorPeopleTransactionDirectory().getAvailableVirtualBalance();

            int compare = amount.compareTo(availableBalance);

            if (compare < 1) {
                if (objSenderUserAccount.getObjPerson().getPersonPINNumber().equals(pin)) {

                    if (transactionType.equals(Transaction.TransactionSourceType.ToPoorPeople.getValue())) {

                        //String receiverUserName = receiverUserNameJTextField.getText();
                        UserAccount objRecUserAccount = UserNameExists.userNameCheck(objWorldEnterprise, receiverUserName);
                        if (objRecUserAccount != null) {

                            if (objRecUserAccount.getUserAccountStatus().equals(UserAccount.StatusType.Acitve.getValue())) {

                                if (objRecUserAccount.getObjRole().toString().equals(Role.RoleType.PoorPeople.getValue() + "Role")) {

                                    Person objPPPerson = objRecUserAccount.getObjPerson();
                                    if (objPPPerson.getPersonStatus().equals(Person.PersonRegStatusType.Active.getValue())) {

                                        if (!objSenderUserAccount.getUserName().equals(objRecUserAccount.getUserName())) {

                                            int response = JOptionPane.showConfirmDialog(null, "Total transfer of $ " + amount + "/- Do you want to transfer?", "Confirm",
                                                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                                            if (response == JOptionPane.YES_OPTION) {

                                                //Sender Transaction
                                                Transaction objVirtualPPSTransaction = (Transaction) objSenderUserAccount.getObjPerson().getObjPoorPeopleTransactionDirectory().addNewTransaction();
                                                objVirtualPPSTransaction.setTransactionBDAmount(amount);
                                                objVirtualPPSTransaction.setObjUserAccountSource(objSenderUserAccount);
                                                objVirtualPPSTransaction.setObjUserAccountDestination(objRecUserAccount);
                                                objVirtualPPSTransaction.setTransactionSource(Transaction.TransactionSourceType.FromPoorPeople.getValue());
                                                objVirtualPPSTransaction.setTransactionDestination(Transaction.TransactionSourceType.ToPoorPeople.getValue());
                                                objVirtualPPSTransaction.setTransactionType(Transaction.TransactionType.Debit.getValue());
                                                objVirtualPPSTransaction.setTransactionMode(Transaction.TransactionModeType.Virtual.getValue());
                                                objSenderUserAccount.getObjPerson().getObjPoorPeopleTransactionDirectory().updateTransactionAccount();

                                                //Receiver Transaction
                                                Transaction objVirtualPPRTransaction = (Transaction) objRecUserAccount.getObjPerson().getObjPoorPeopleTransactionDirectory().addNewTransaction();
                                                objVirtualPPRTransaction.setTransactionBDAmount(amount);
                                                objVirtualPPRTransaction.setObjUserAccountSource(objSenderUserAccount);
                                                objVirtualPPRTransaction.setObjUserAccountDestination(objRecUserAccount);
                                                objVirtualPPRTransaction.setTransactionSource(Transaction.TransactionSourceType.FromPoorPeople.getValue());
                                                objVirtualPPRTransaction.setTransactionDestination(Transaction.TransactionSourceType.ToPoorPeople.getValue());
                                                objVirtualPPRTransaction.setTransactionType(Transaction.TransactionType.Credit.getValue());
                                                objVirtualPPRTransaction.setTransactionMode(Transaction.TransactionModeType.Virtual.getValue());
                                                objRecUserAccount.getObjPerson().getObjPoorPeopleTransactionDirectory().updateTransactionAccount();

                                                JOptionPane.showMessageDialog(null, "$ " + amount + "/- transferred successfully");

                                                CardLayoutContainer.removeCurrentCardLayout(userProcessContainer, this);
                                            }
                                        } else {
                                            JOptionPane.showMessageDialog(null, "You cannot transfer money to yourself");
                                        }
                                    } else {
                                        JOptionPane.showMessageDialog(null, "You cannot transfer money. Person is not Active");
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "You can only transfer money to Poor People");
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "You cannot transfer money. Person is not Active");
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Please enter valid receiver");
                        }
                    }

                    if (transactionType.equals(Transaction.TransactionSourceType.ToRegSiteEnterprise.getValue())) {

                        RegisteredSiteEnterprise objRegisteredSiteEnterprise = (RegisteredSiteEnterprise) regSiteJComboBox.getSelectedItem();
                        if (objRegisteredSiteEnterprise != null) {

                            int response = JOptionPane.showConfirmDialog(null, "Total transfer of $ " + amount + "/- Do you want to transfer?", "Confirm",
                                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                            if (response == JOptionPane.YES_OPTION) {
                                //Sender Transaction
                                Transaction objVirtualPPSTransaction = (Transaction) objSenderUserAccount.getObjPerson().getObjPoorPeopleTransactionDirectory().addNewTransaction();
                                objVirtualPPSTransaction.setTransactionBDAmount(amount);
                                objVirtualPPSTransaction.setObjUserAccountSource(objSenderUserAccount);
                                objVirtualPPSTransaction.setObjUserAccountDestination(null);
                                objVirtualPPSTransaction.setTransactionSource(Transaction.TransactionSourceType.FromPoorPeople.getValue());
                                objVirtualPPSTransaction.setTransactionDestination(Transaction.TransactionSourceType.ToRegSiteEnterprise.getValue());
                                objVirtualPPSTransaction.setTransactionType(Transaction.TransactionType.Debit.getValue());
                                objVirtualPPSTransaction.setTransactionMode(Transaction.TransactionModeType.Virtual.getValue());
                                objSenderUserAccount.getObjPerson().getObjPoorPeopleTransactionDirectory().updateTransactionAccount();

                                //Receiver Transaction
                                Transaction objVirtualPPRTransaction = (Transaction) objRegisteredSiteEnterprise.getObjTransactionDirectory().addNewTransaction();
                                objVirtualPPRTransaction.setTransactionBDAmount(amount);
                                objVirtualPPRTransaction.setObjUserAccountSource(objSenderUserAccount);
                                objVirtualPPRTransaction.setObjUserAccountDestination(null);
                                objVirtualPPRTransaction.setTransactionSource(Transaction.TransactionSourceType.FromPoorPeople.getValue());
                                objVirtualPPRTransaction.setTransactionDestination(Transaction.TransactionSourceType.ToRegSiteEnterprise.getValue());
                                objVirtualPPRTransaction.setTransactionType(Transaction.TransactionType.Debit.getValue());
                                objVirtualPPRTransaction.setTransactionMode(Transaction.TransactionModeType.Real.getValue());
                                objRegisteredSiteEnterprise.getObjTransactionDirectory().updateTransactionAccount();

                                JOptionPane.showMessageDialog(null, "$ " + amount + "/- transferred successfully");

                                CardLayoutContainer.removeCurrentCardLayout(userProcessContainer, this);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Please select registered site");
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please enter valid PIN");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please enter amount less than available balance");
            }
        }
    }//GEN-LAST:event_transferJButtonActionPerformed

    private boolean validationTransfer() {

        pin = String.valueOf(pinJPasswordField.getPassword());
        transferAmount = amountJTextField.getText().trim();//new BigDecimal(amountJTextField.getText());

        if (Validation.checkForNull(pin)) {
            JOptionPane.showMessageDialog(null, "Please enter PIN");
            pinJPasswordField.requestFocus();
            return false;
        }

        if (transactionType.equals(Transaction.TransactionSourceType.ToPoorPeople.getValue())) {

            receiverUserName = receiverUserNameJTextField.getText();

            if (Validation.checkForNull(receiverUserName)) {
                JOptionPane.showMessageDialog(null, "Please enter receiver username");
                receiverUserNameJTextField.requestFocus();
                return false;
            }
        }

        if (Validation.checkForNull(transferAmount)) {
            JOptionPane.showMessageDialog(null, "Please enter Amount");
            amountJTextField.requestFocus();
            return false;
        }

        try {
            amount = new BigDecimal(transferAmount);

            if (Validation.checkForNegativeAmount(amount)) {

                JOptionPane.showMessageDialog(null, "Please enter a positive amount");
                amountJTextField.requestFocus();
                return false;
            }

            if (amount.scale() > 2) {
                JOptionPane.showMessageDialog(null, "Please enter a proper amount with only 2 decimal. eg. 108.18");
                amountJTextField.requestFocus();
                return false;
            }

            return true;

        } catch (NumberFormatException exe) {
            JOptionPane.showMessageDialog(null, "Please enter a proper amount");
            amountJTextField.requestFocus();
            return false;
        }

    }


    private void backJButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButton5ActionPerformed

        CardLayoutContainer.removeCurrentCardLayout(userProcessContainer, this);
    }//GEN-LAST:event_backJButton5ActionPerformed

    private void regSiteJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regSiteJComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_regSiteJComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amountJTextField;
    private javax.swing.JButton backJButton5;
    private javax.swing.JLabel dollarJLabel;
    private javax.swing.JPasswordField mainJPasswordField;
    private javax.swing.JLabel passJLabel;
    private javax.swing.JLabel pinJLabel;
    private javax.swing.JPasswordField pinJPasswordField;
    private javax.swing.JLabel receiverUserNameJLabel;
    private javax.swing.JTextField receiverUserNameJTextField;
    private javax.swing.JComboBox regSiteJComboBox;
    private javax.swing.JLabel regSiteJLabel;
    private javax.swing.JLabel titleJLabel;
    private javax.swing.JLabel transferAmtJLabel;
    private javax.swing.JButton transferJButton;
    private javax.swing.JLabel userNameJLabel;
    private javax.swing.JTextField userNameJTextField;
    private javax.swing.JButton validateJButton;
    // End of variables declaration//GEN-END:variables
}
