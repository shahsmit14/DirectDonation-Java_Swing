/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.FieldAgentRole;

import Business.CountryEnterprise.CountryEnterprise;
import Business.Helper.CardLayoutContainer;
import Business.Helper.InternationalIDExists;
import Business.Helper.Validation;
import Business.Organization.FieldExpertOrganization;
import Business.Organization.Organization;
import Business.Organization.PoorPeopleOrganization;
import Business.Person.Person;
import Business.Person.PoorPeople.FamilyMember;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PPVerificationWorkRequest;
import Business.WorkQueue.WorkRequest;
import Business.WorldEnterprise;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.JXDatePicker;

/**
 *
 * @author "Smit Shah, NUID: 001748537, AED - Final Project"
 */
public class RegisterPoorPeopleJPanel extends javax.swing.JPanel {

    /**
     * Creates new form RegisterPoorPeopleJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount objUserAccount;
    private WorldEnterprise objWorldEnterprise;
    private CountryEnterprise objCountryEnterprise;
    private Organization objOrganization;
    private Date ppDobDate;
    private Date fmDobDate;
    private Person objPerson;

    private String ppIntID, ppFirstName, ppLastName, ppDob, ppSex, ppAdd1, ppAdd2,
            ppCountry, ppState, ppVillage, ppPinCode, strPPDob, ppHouseType,
            ppHouseCondition, ppHouseLat, ppHouseLon;
    private int ppAge;
    private String fmIntID, fmFirstName, fmLastName, fmDob, fmSex, fmRelation;
    private int fmAge;

    public RegisterPoorPeopleJPanel(JPanel userProcessContainerPassed, UserAccount objUserAccountPassed,
            WorldEnterprise objWorldEnterprisePassed, CountryEnterprise objCountryEnterprisePassed, Organization objOrganizationPassed) {

        initComponents();

        this.userProcessContainer = userProcessContainerPassed;
        this.objUserAccount = objUserAccountPassed;
        this.objCountryEnterprise = objCountryEnterprisePassed;
        this.objWorldEnterprise = objWorldEnterprisePassed;
        this.objOrganization = objOrganizationPassed;

        populateForm();
    }

    private void populateForm() {

        populateSex();
        populateHouseDetails();
        populateRelationDetails();

        objPerson = new Person(Organization.OrganizationType.PoorPeople.getValue());
        ppCountryJTextField.setText(objCountryEnterprise.getCountryEntName());
    }

    private void populateSex() {

        ppSexJComboBox.removeAllItems();
        fmSexJComboBox.removeAllItems();

        for (Person.SexType sexType : Person.SexType.values()) {

            ppSexJComboBox.addItem(sexType);
            fmSexJComboBox.addItem(sexType);
        }
    }

    private void populateHouseDetails() {

        houseTypeJComboBox.removeAllItems();
        houseConditionJComboBox.removeAllItems();

        for (Person.HouseType houseType : Person.HouseType.values()) {
            houseTypeJComboBox.addItem(houseType);
        }

        for (Person.HouseConditionType houseConType : Person.HouseConditionType.values()) {
            houseConditionJComboBox.addItem(houseConType);
        }
    }

    private void populateRelationDetails() {

        fmRelationJComboBox.removeAllItems();;

        for (Person.RelationType relType : Person.RelationType.values()) {
            fmRelationJComboBox.addItem(relType);
        }
    }

    private void populateFamilyTable(ArrayList<FamilyMember> familyMemberListPassed) {

        DefaultTableModel dtm = (DefaultTableModel) fmJTable.getModel();
        dtm.setRowCount(0);
        for (FamilyMember objFamilyMember : familyMemberListPassed) {

            Object row[] = new Object[3];
            row[0] = objFamilyMember.getMemberInternationalID(); //objUserAccount.getObjPerson().getPersonID();
            row[1] = objFamilyMember;
            row[2] = objFamilyMember.getMemberRelation();

            dtm.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleJLabel = new javax.swing.JLabel();
        idJLabel = new javax.swing.JLabel();
        ppIntIdJTextField = new javax.swing.JTextField();
        firNameJLabel = new javax.swing.JLabel();
        ppFirstNameJTextField = new javax.swing.JTextField();
        lastNameJLabel = new javax.swing.JLabel();
        ppLastNameJTextField = new javax.swing.JTextField();
        dobJLabel = new javax.swing.JLabel();
        ppDobJTextField = new javax.swing.JTextField();
        sexJLabel = new javax.swing.JLabel();
        add1JLabel = new javax.swing.JLabel();
        ppAdd1JTextField = new javax.swing.JTextField();
        add2JLabel = new javax.swing.JLabel();
        ppAdd2JTextField = new javax.swing.JTextField();
        cityJLabel = new javax.swing.JLabel();
        ppCityJTextField = new javax.swing.JTextField();
        stateJLabel = new javax.swing.JLabel();
        ppStateJTextField = new javax.swing.JTextField();
        countryJLabel = new javax.swing.JLabel();
        ppCountryJTextField = new javax.swing.JTextField();
        pinJLabel = new javax.swing.JLabel();
        ppPinCodeJTextField = new javax.swing.JTextField();
        title2JLabel = new javax.swing.JLabel();
        title3JLabel = new javax.swing.JLabel();
        hTypeJLabel = new javax.swing.JLabel();
        hConJLabel = new javax.swing.JLabel();
        hLatJLabel = new javax.swing.JLabel();
        houseLatJTextField = new javax.swing.JTextField();
        hLonJLabel = new javax.swing.JLabel();
        houseLonJTextField = new javax.swing.JTextField();
        fIdJLabel = new javax.swing.JLabel();
        fmIntIdJTextField = new javax.swing.JTextField();
        fNameJLabel = new javax.swing.JLabel();
        fmFirstNameJTextField = new javax.swing.JTextField();
        lNameJLabel = new javax.swing.JLabel();
        fmLastNameJTextField = new javax.swing.JTextField();
        title5JLabel = new javax.swing.JLabel();
        fmDobJTextField = new javax.swing.JTextField();
        fSexJLabel = new javax.swing.JLabel();
        relationJLabel = new javax.swing.JLabel();
        fDobJLabel = new javax.swing.JLabel();
        addFmJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        fmJTable = new javax.swing.JTable();
        removeFmJButton = new javax.swing.JButton();
        ppDobJButton = new javax.swing.JButton();
        fmDobJButton = new javax.swing.JButton();
        ppSexJComboBox = new javax.swing.JComboBox();
        fmSexJComboBox = new javax.swing.JComboBox();
        houseConditionJComboBox = new javax.swing.JComboBox();
        houseTypeJComboBox = new javax.swing.JComboBox();
        submitJButton = new javax.swing.JButton();
        fmRelationJComboBox = new javax.swing.JComboBox();
        backJButton2 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        titleJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        titleJLabel.setText("Registeration Form");

        idJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        idJLabel.setText("International ID:");

        ppIntIdJTextField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        ppIntIdJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ppIntIdJTextFieldFocusLost(evt);
            }
        });

        firNameJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        firNameJLabel.setText("First Name:");

        ppFirstNameJTextField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        lastNameJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lastNameJLabel.setText("Last Name:");

        ppLastNameJTextField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        dobJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        dobJLabel.setText("Date of Birth:");

        ppDobJTextField.setEditable(false);
        ppDobJTextField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        sexJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        sexJLabel.setText("Sex:");

        add1JLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        add1JLabel.setText("Address 1:");

        ppAdd1JTextField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        add2JLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        add2JLabel.setText("Address 2");

        ppAdd2JTextField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        cityJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        cityJLabel.setText("Village / City");

        ppCityJTextField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        stateJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        stateJLabel.setText("State");

        ppStateJTextField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        countryJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        countryJLabel.setText("Country:");

        ppCountryJTextField.setEditable(false);
        ppCountryJTextField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        pinJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        pinJLabel.setText("Pin Code");

        ppPinCodeJTextField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        title2JLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        title2JLabel.setText("Personnel Details");

        title3JLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        title3JLabel.setText("House Details");

        hTypeJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        hTypeJLabel.setText("Type");

        hConJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        hConJLabel.setText("Condition");

        hLatJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        hLatJLabel.setText("Latitude");

        houseLatJTextField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        hLonJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        hLonJLabel.setText("Longitude");

        houseLonJTextField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        fIdJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        fIdJLabel.setText("International ID");

        fmIntIdJTextField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        fmIntIdJTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                fmIntIdJTextFieldFocusLost(evt);
            }
        });

        fNameJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        fNameJLabel.setText("First Name");

        fmFirstNameJTextField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        lNameJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        lNameJLabel.setText("Last Name");

        fmLastNameJTextField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        title5JLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        title5JLabel.setText("Family Member Details");

        fmDobJTextField.setEditable(false);
        fmDobJTextField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        fSexJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        fSexJLabel.setText("Sex");

        relationJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        relationJLabel.setText("Relation");

        fDobJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        fDobJLabel.setText("Date of Birth");

        addFmJButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        addFmJButton.setText("Add Family Member");
        addFmJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFmJButtonActionPerformed(evt);
            }
        });

        fmJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "International ID", "Name", "Relation"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(fmJTable);
        if (fmJTable.getColumnModel().getColumnCount() > 0) {
            fmJTable.getColumnModel().getColumn(0).setResizable(false);
            fmJTable.getColumnModel().getColumn(1).setResizable(false);
            fmJTable.getColumnModel().getColumn(2).setResizable(false);
        }

        removeFmJButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        removeFmJButton.setText("Remov Member");
        removeFmJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFmJButtonActionPerformed(evt);
            }
        });

        ppDobJButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        ppDobJButton.setText("Select");
        ppDobJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ppDobJButtonActionPerformed(evt);
            }
        });

        fmDobJButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        fmDobJButton.setText("Select");
        fmDobJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fmDobJButtonActionPerformed(evt);
            }
        });

        ppSexJComboBox.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        fmSexJComboBox.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        houseConditionJComboBox.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        houseTypeJComboBox.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        submitJButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        submitJButton.setText("SUBMIT");
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });

        fmRelationJComboBox.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        backJButton2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        backJButton2.setText("<< Back");
        backJButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(179, 179, 179)
                        .addComponent(title2JLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(firNameJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(33, 33, 33)
                                            .addComponent(ppFirstNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(idJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(33, 33, 33)
                                            .addComponent(ppIntIdJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lastNameJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(33, 33, 33)
                                            .addComponent(ppLastNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(dobJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(33, 33, 33)
                                            .addComponent(ppDobJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(sexJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(add1JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(33, 33, 33)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(ppSexJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(ppAdd1JTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE))))
                                .addGap(18, 18, 18)
                                .addComponent(ppDobJButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(add2JLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(33, 33, 33)
                                        .addComponent(ppAdd2JTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(countryJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(33, 33, 33)
                                        .addComponent(ppCountryJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cityJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(33, 33, 33)
                                        .addComponent(ppCityJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(stateJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(33, 33, 33)
                                        .addComponent(ppStateJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(166, 166, 166)
                                        .addComponent(title3JLabel))
                                    .addComponent(backJButton2)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(hConJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(hLatJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(hLonJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(hTypeJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(33, 33, 33)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(houseConditionJComboBox, 0, 298, Short.MAX_VALUE)
                                                .addComponent(houseLatJTextField)
                                                .addComponent(houseLonJTextField)
                                                .addComponent(houseTypeJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(pinJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(33, 33, 33)
                                            .addComponent(ppPinCodeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(titleJLabel)
                                        .addComponent(submitJButton, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(56, 56, 56)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(title5JLabel)
                                                .addGap(147, 147, 147))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                        .addComponent(relationJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(33, 33, 33)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(addFmJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                            .addComponent(fmRelationJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(0, 0, Short.MAX_VALUE)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                            .addComponent(removeFmJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                                    .addComponent(fSexJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                    .addGap(33, 33, 33)
                                                                    .addComponent(fmSexJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                    .addGroup(layout.createSequentialGroup()
                                                                        .addComponent(lNameJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addGap(33, 33, 33)
                                                                        .addComponent(fmLastNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                    .addGroup(layout.createSequentialGroup()
                                                                        .addComponent(fIdJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addGap(33, 33, 33)
                                                                        .addComponent(fmIntIdJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                    .addGroup(layout.createSequentialGroup()
                                                                        .addComponent(fNameJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addGap(33, 33, 33)
                                                                        .addComponent(fmFirstNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                    .addGroup(layout.createSequentialGroup()
                                                                        .addComponent(fDobJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addGap(33, 33, 33)
                                                                        .addComponent(fmDobJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                .addGap(18, 18, 18)
                                                .addComponent(fmDobJButton)))))))))
                .addGap(228, 228, 228))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleJLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(title2JLabel)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idJLabel)
                            .addComponent(ppIntIdJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(firNameJLabel)
                            .addComponent(ppFirstNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lastNameJLabel)
                            .addComponent(ppLastNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dobJLabel)
                            .addComponent(ppDobJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ppDobJButton))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sexJLabel)
                            .addComponent(ppSexJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(add1JLabel)
                            .addComponent(ppAdd1JTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(add2JLabel)
                            .addComponent(ppAdd2JTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cityJLabel)
                            .addComponent(ppCityJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(stateJLabel)
                            .addComponent(ppStateJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(countryJLabel)
                            .addComponent(ppCountryJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pinJLabel)
                            .addComponent(ppPinCodeJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addComponent(title3JLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(title5JLabel)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fIdJLabel)
                            .addComponent(fmIntIdJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fNameJLabel)
                            .addComponent(fmFirstNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lNameJLabel)
                            .addComponent(fmLastNameJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fDobJLabel)
                            .addComponent(fmDobJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fmDobJButton))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fSexJLabel)
                            .addComponent(fmSexJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(relationJLabel)
                            .addComponent(fmRelationJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(addFmJButton)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(removeFmJButton)))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hTypeJLabel)
                    .addComponent(houseTypeJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hConJLabel)
                    .addComponent(houseConditionJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hLatJLabel)
                    .addComponent(houseLatJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hLonJLabel)
                    .addComponent(houseLonJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backJButton2)
                    .addComponent(submitJButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addFmJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFmJButtonActionPerformed

        //Validation
        boolean validationSuccess;
        validationSuccess = validationFamilyMember();

        if (validationSuccess) {

            FamilyMember objFamilyMember = new FamilyMember();
            objFamilyMember.setMemberInternationalID(fmIntID);
            objFamilyMember.setMemberFirstName(fmFirstName);
            objFamilyMember.setMemberLastName(fmLastName);
            objFamilyMember.setMemberDateOfBirth(fmDob);
            objFamilyMember.setMemberSex(fmSex);
            objFamilyMember.setMemberRelation(fmRelation);
            objFamilyMember.setMemberAge(fmAge);

            objPerson.getObjFamilyMemberDirectory().getFamilyMemberList().add(objFamilyMember);

            JOptionPane.showMessageDialog(null, "New Member added successfully");

            fmIntIdJTextField.setText(null);
            fmFirstNameJTextField.setText(null);
            fmLastNameJTextField.setText(null);
            fmDobJTextField.setText(null);

            populateFamilyTable(objPerson.getObjFamilyMemberDirectory().getFamilyMemberList());
        }

    }//GEN-LAST:event_addFmJButtonActionPerformed

    private boolean validationFamilyMember() {

        fmIntID = fmIntIdJTextField.getText().trim();
        fmFirstName = fmFirstNameJTextField.getText().trim();
        fmLastName = fmLastNameJTextField.getText().trim();
        fmDob = fmDobJTextField.getText().trim();
        //fmSex = fmSexJComboBox.getSelectedItem().toString().trim();
        fmRelation = fmRelationJComboBox.getSelectedItem().toString().trim();

        if (Validation.checkForNull(fmIntID)) {
            JOptionPane.showMessageDialog(null, "Please enter International ID of the family member");
            fmIntIdJTextField.requestFocus();
            return false;
        }

        if (Validation.checkForOnlyNumAlphabets(fmIntID)) {
            JOptionPane.showMessageDialog(null, "Please enter a proper International ID of the family member. It should contain only alphabets and numbers");
            fmIntIdJTextField.requestFocus();
            return false;
        }

        if (Validation.checkForNull(fmFirstName)) {
            JOptionPane.showMessageDialog(null, "Please enter first name of the family member");
            fmFirstNameJTextField.requestFocus();
            return false;
        }

        if (Validation.checkForOnlyAlphabets(fmFirstName)) {
            JOptionPane.showMessageDialog(null, "Please enter a proper first name of the family member. It should contain only alphabets");
            fmFirstNameJTextField.requestFocus();
            return false;
        }

        if (Validation.checkForNull(fmLastName)) {
            JOptionPane.showMessageDialog(null, "Please enter last name of the family member");
            fmLastNameJTextField.requestFocus();
            return false;
        }

        if (Validation.checkForOnlyAlphabets(fmLastName)) {
            JOptionPane.showMessageDialog(null, "Please enter a proper last name of the family member. It should contain only alphabets");
            fmLastNameJTextField.requestFocus();
            return false;
        }

        if (fmSexJComboBox.getSelectedItem() != null) {
            fmSex = fmSexJComboBox.getSelectedItem().toString();
        } else {
            JOptionPane.showMessageDialog(null, "Please select sex of the family member");
            fmSexJComboBox.requestFocus();
            return false;
        }

        if (Validation.checkForNull(fmDob)) {
            JOptionPane.showMessageDialog(null, "Please select date of birth of the family member");
            fmDobJTextField.requestFocus();
            return false;
        }

        if (fmRelationJComboBox.getSelectedItem() != null) {
            fmRelation = fmRelationJComboBox.getSelectedItem().toString();
        } else {
            JOptionPane.showMessageDialog(null, "Please select relation of the family member");
            fmRelationJComboBox.requestFocus();
            return false;
        }

        return true;
    }


    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed

        //Validation
        boolean validationSuccess;
        validationSuccess = validationPersonDetails();

        if (validationSuccess) {

            int response = JOptionPane.showConfirmDialog(null, "Only: " + objPerson.getObjFamilyMemberDirectory().getFamilyMemberList().size() + " family member is added. Do you want to add more?", "Confirm",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response == JOptionPane.YES_OPTION) {
                return;
            }
            if (response == JOptionPane.NO_OPTION) {

                PoorPeopleOrganization objPoorPeopleOrganization = null;

                for (Organization objOrganization : objCountryEnterprise.getObjOrganizationDirectory().getOrganizationList()) {
                    if (objOrganization instanceof PoorPeopleOrganization) {
                        objPoorPeopleOrganization = (PoorPeopleOrganization) objOrganization;
                        break;
                    }
                }

                if (objPoorPeopleOrganization != null) {

                    objPerson.setPersonInternationalID(ppIntID);
                    objPerson.setPersonFirstName(ppFirstName);
                    objPerson.setPersonLastName(ppLastName);
                    objPerson.setPersonDateOfBirth(ppDob);
                    objPerson.setPersonAge(ppAge);
                    objPerson.setPersonSex(ppSex);
                    objPerson.setPersonAddress1(ppAdd1);
                    objPerson.setPersonAddress2(ppAdd2);
                    objPerson.setPersonCity(ppVillage);
                    objPerson.setPersonState(ppState);
                    objPerson.setPersonCountry(ppCountry);
                    objPerson.setPersonPinCode(ppPinCode);
                    objPerson.setPersonHouseType(ppHouseType);
                    objPerson.setPersonHouseCondition(ppHouseCondition);
                    objPerson.setPersonHouseLatitude(ppHouseLat);
                    objPerson.setPersonHouseLongitude(ppHouseLon);
                    objPerson.setPersonStatus(Person.PersonRegStatusType.Registered.getValue());

                    objPoorPeopleOrganization.getObjPersonDirectory().getPersonList().add(objPerson);

                    //Add Request for approv/disapprove to FieldExpert Organization WorkQueue
                    for (Organization objOrganization : objCountryEnterprise.getObjOrganizationDirectory().getOrganizationList()) {
                        if (objOrganization instanceof FieldExpertOrganization) {

                            PPVerificationWorkRequest objPPVerificationWorkRequest = new PPVerificationWorkRequest();
                            objPPVerificationWorkRequest.setObjPerson(objPerson);
                            objPPVerificationWorkRequest.setSender(objUserAccount);
                            objPPVerificationWorkRequest.setReceiver(null);
                            objPPVerificationWorkRequest.setMessage("Verify PoorPeople");
                            objPPVerificationWorkRequest.setStatus(WorkRequest.WorkRequestStatus.ASSIGNED.getValue());

                            //Adding WorkRequest in FieldExpertOrganization, so everyone can view it
                            objOrganization.getObjWorkQueue().getWorkRequestList().add(objPPVerificationWorkRequest);

                            //Adding WorkRequest in FieldAgent Queue.
                            objUserAccount.getObjWorkQueue().getWorkRequestList().add(objPPVerificationWorkRequest);

                            JOptionPane.showMessageDialog(null, "Person registered successfully!");

                            CardLayoutContainer.removeCurrentCardLayout(userProcessContainer, this);
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please Add again");
                }
            }
        }
    }//GEN-LAST:event_submitJButtonActionPerformed

    private boolean validationPersonDetails() {

        ppIntID = ppIntIdJTextField.getText().trim();
        ppFirstName = ppFirstNameJTextField.getText().trim();
        ppLastName = ppLastNameJTextField.getText().trim();
        ppDob = ppDobJTextField.getText().trim();
        ppAdd1 = ppAdd1JTextField.getText().trim();
        ppAdd2 = ppAdd2JTextField.getText().trim();
        ppVillage = ppCityJTextField.getText().trim();
        ppState = ppStateJTextField.getText().trim();
        ppCountry = ppCountryJTextField.getText().trim();
        ppPinCode = ppPinCodeJTextField.getText().trim();
        ppHouseLat = houseLatJTextField.getText().trim();
        ppHouseLon = houseLonJTextField.getText().trim();

        if (Validation.checkForNull(ppIntID)) {
            JOptionPane.showMessageDialog(null, "Please enter International ID of the member");
            ppIntIdJTextField.requestFocus();
            return false;
        }

        if (Validation.checkForOnlyNumAlphabets(ppIntID)) {
            JOptionPane.showMessageDialog(null, "Please enter a proper International ID of the member. It should contain only alphabets and numbers");
            ppIntIdJTextField.requestFocus();
            return false;
        }

        if (Validation.checkForNull(ppFirstName)) {
            JOptionPane.showMessageDialog(null, "Please enter first name of the member");
            ppFirstNameJTextField.requestFocus();
            return false;
        }

        if (Validation.checkForOnlyAlphabets(ppFirstName)) {
            JOptionPane.showMessageDialog(null, "Please enter a proper first name of the member. It should contain only alphabets");
            ppFirstNameJTextField.requestFocus();
            return false;
        }

        if (Validation.checkForNull(ppLastName)) {
            JOptionPane.showMessageDialog(null, "Please enter last name of the member");
            ppLastNameJTextField.requestFocus();
            return false;
        }

        if (Validation.checkForOnlyAlphabets(ppLastName)) {
            JOptionPane.showMessageDialog(null, "Please enter a proper last name of the member. It should contain only alphabets");
            ppLastNameJTextField.requestFocus();
            return false;
        }

        if (ppSexJComboBox.getSelectedItem() != null) {
            ppSex = fmSexJComboBox.getSelectedItem().toString();
        } else {
            JOptionPane.showMessageDialog(null, "Please select sex of the member");
            fmSexJComboBox.requestFocus();
            return false;
        }

        if (Validation.checkForNull(ppAdd1)) {
            JOptionPane.showMessageDialog(null, "Please enter Address 1");
            ppAdd1JTextField.requestFocus();
            return false;
        }

        if (Validation.checkForNull(ppDob)) {
            JOptionPane.showMessageDialog(null, "Please select date of birth of the member");
            ppDobJTextField.requestFocus();
            return false;
        }

        if (Validation.checkForOnlyNumAlphabets(ppAdd1)) {
            JOptionPane.showMessageDialog(null, "Please enter proper Address 1. It should only contain alphabets and numbers");
            ppAdd1JTextField.requestFocus();
            return false;
        }

        if (Validation.checkForNull(ppAdd2)) {
            JOptionPane.showMessageDialog(null, "Please enter Address 2");
            ppAdd2JTextField.requestFocus();
            return false;
        }

        if (Validation.checkForOnlyNumAlphabets(ppAdd2)) {
            JOptionPane.showMessageDialog(null, "Please enter proper Address 2. It should only contain alphabets and numbers");
            ppAdd2JTextField.requestFocus();
            return false;
        }

        if (Validation.checkForNull(ppVillage)) {
            JOptionPane.showMessageDialog(null, "Please enter village/city");
            ppCityJTextField.requestFocus();
            return false;
        }

        if (Validation.checkForOnlyAlphabets(ppVillage)) {
            JOptionPane.showMessageDialog(null, "Please enter a proper village/city. It should contain only alphabets");
            ppCityJTextField.requestFocus();
            return false;
        }

        if (Validation.checkForNull(ppState)) {
            JOptionPane.showMessageDialog(null, "Please enter state");
            ppStateJTextField.requestFocus();
            return false;
        }

        if (Validation.checkForOnlyAlphabets(ppState)) {
            JOptionPane.showMessageDialog(null, "Please enter a proper state. It should contain only alphabets");
            ppStateJTextField.requestFocus();
            return false;
        }

        if (Validation.checkForNull(ppCountry)) {
            JOptionPane.showMessageDialog(null, "Please enter country");
            ppCountryJTextField.requestFocus();
            return false;
        }

        if (Validation.checkForOnlyAlphabets(ppCountry)) {
            JOptionPane.showMessageDialog(null, "Please enter a proper country. It should contain only alphabets");
            ppCountryJTextField.requestFocus();
            return false;
        }

        if (Validation.checkForNull(ppPinCode)) {
            JOptionPane.showMessageDialog(null, "Please enter pin code");
            ppPinCodeJTextField.requestFocus();
            return false;
        }

        if (Validation.checkForOnlyNumbers(ppPinCode)) {
            JOptionPane.showMessageDialog(null, "Please enter a proper pin code. It should contain only numbers");
            ppPinCodeJTextField.requestFocus();
            return false;
        }

        if (houseConditionJComboBox.getSelectedItem() != null) {
            ppHouseCondition = houseConditionJComboBox.getSelectedItem().toString().trim();
        } else {
            JOptionPane.showMessageDialog(null, "Please select house condition of the member");
            houseConditionJComboBox.requestFocus();
            return false;
        }

        if (houseTypeJComboBox.getSelectedItem() != null) {
            ppHouseType = houseTypeJComboBox.getSelectedItem().toString().trim();
        } else {
            JOptionPane.showMessageDialog(null, "Please select house type of the member");
            houseTypeJComboBox.requestFocus();
            return false;
        }

        if (Validation.checkForNull(ppHouseLat)) {
            JOptionPane.showMessageDialog(null, "Please enter house latitude coordinates");
            houseLatJTextField.requestFocus();
            return false;
        }

        if (Validation.checkForInValidGPSCoordinates(ppHouseLat)) {
            JOptionPane.showMessageDialog(null, "Please enter proper house latitude coordinates");
            houseLatJTextField.requestFocus();
            return false;
        }

        if (Validation.checkForNull(ppHouseLon)) {
            JOptionPane.showMessageDialog(null, "Please enter house longitude coordinates");
            houseLonJTextField.requestFocus();
            return false;
        }

        if (Validation.checkForInValidGPSCoordinates(ppHouseLon)) {
            JOptionPane.showMessageDialog(null, "Please enter proper house longitude coordinates");
            houseLonJTextField.requestFocus();
            return false;
        }

        return true;
    }


    private void ppDobJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ppDobJButtonActionPerformed

        JFrame frame = new JFrame("Select Date");
        JPanel panel = new JPanel();

        //frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(400, 400, 250, 100);

        JXDatePicker picker = new JXDatePicker();
        picker.setDate(Calendar.getInstance().getTime());
        SimpleDateFormat objSimpleDateFormat = new SimpleDateFormat("MM/dd/yyyy");
        picker.setFormats(objSimpleDateFormat);

        panel.add(picker);
        frame.getContentPane().add(panel);
        frame.setVisible(true);

        picker.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {

                Date selectedDate = picker.getDate();

                //create calendar object for birth day
                Calendar birthDay = Calendar.getInstance();
                birthDay.setTimeInMillis(selectedDate.getTime());

                //create calendar object for current day
                long currentTime = System.currentTimeMillis();
                Calendar now = Calendar.getInstance();
                now.setTimeInMillis(currentTime);

                //Get difference between years
                int years = now.get(Calendar.YEAR) - birthDay.get(Calendar.YEAR);
                int currMonth = now.get(Calendar.MONTH) + 1;
                int birthMonth = birthDay.get(Calendar.MONTH) + 1;
                //Get difference between months
                int months = currMonth - birthMonth;
                //if month difference is in negative then reduce years by one and calculate the number of months.
                if (months < 0) {
                    years--;
                    months = 12 - birthMonth + currMonth;
                    if (now.get(Calendar.DATE) < birthDay.get(Calendar.DATE)) {
                        months--;
                    }
                } else if (months == 0 && now.get(Calendar.DATE) < birthDay.get(Calendar.DATE)) {
                    years--;
                    months = 11;
                }

                System.out.println("Age == " + years);

                if (years < 0) {
                    JOptionPane.showMessageDialog(null, "Please enter valid date of birth");
                } else if (years < 18) {
                    JOptionPane.showMessageDialog(null, "Person with age 18 or more can only be registered");
                } else {
                    ppDobDate = picker.getDate();
                    ppDob = objSimpleDateFormat.format(ppDobDate);
                    ppDobJTextField.setText(ppDob);
                    ppAge = years;
                }
            }
        });
    }//GEN-LAST:event_ppDobJButtonActionPerformed

    private void fmDobJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fmDobJButtonActionPerformed

        JFrame frame = new JFrame("Select Date");
        JPanel panel = new JPanel();

        //frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setBounds(400, 400, 250, 100);

        JXDatePicker picker = new JXDatePicker();
        picker.setDate(Calendar.getInstance().getTime());
        SimpleDateFormat objSimpleDateFormat = new SimpleDateFormat("MM/dd/yyyy");
        picker.setFormats(objSimpleDateFormat);

        panel.add(picker);
        frame.getContentPane().add(panel);
        frame.setVisible(true);

        picker.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {

                Date selectedDate = picker.getDate();

                //create calendar object for birth day
                Calendar birthDay = Calendar.getInstance();
                birthDay.setTimeInMillis(selectedDate.getTime());

                //create calendar object for current day
                long currentTime = System.currentTimeMillis();
                Calendar now = Calendar.getInstance();
                now.setTimeInMillis(currentTime);

                //Get difference between years
                int years = now.get(Calendar.YEAR) - birthDay.get(Calendar.YEAR);
                int currMonth = now.get(Calendar.MONTH) + 1;
                int birthMonth = birthDay.get(Calendar.MONTH) + 1;
                //Get difference between months
                int months = currMonth - birthMonth;
                //if month difference is in negative then reduce years by one and calculate the number of months.
                if (months < 0) {
                    years--;
                    months = 12 - birthMonth + currMonth;
                    if (now.get(Calendar.DATE) < birthDay.get(Calendar.DATE)) {
                        months--;
                    }
                } else if (months == 0 && now.get(Calendar.DATE) < birthDay.get(Calendar.DATE)) {
                    years--;
                    months = 11;
                }

                System.out.println("Age == " + years);

                if (years == 0 && months < 0) {
                    JOptionPane.showMessageDialog(null, "Please enter valid date of birth");
                } else if (years < 0) {
                    JOptionPane.showMessageDialog(null, "Please enter valid date of birth");
                } else {
                    fmDobDate = picker.getDate();
                    fmDob = objSimpleDateFormat.format(fmDobDate);
                    fmDobJTextField.setText(fmDob);
                    fmAge = years;
                }
            }
        });
    }//GEN-LAST:event_fmDobJButtonActionPerformed

    private void removeFmJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFmJButtonActionPerformed

        FamilyMember objFamilyMember;

        int selectedUser = fmJTable.getSelectedRow();

        if (selectedUser < 0) {
            JOptionPane.showMessageDialog(null, "Please select a Member");
            return;
        }

        objFamilyMember = (FamilyMember) fmJTable.getValueAt(selectedUser, 1);

        if (objFamilyMember != null) {

            objPerson.getObjFamilyMemberDirectory().getFamilyMemberList().remove(objFamilyMember);
            populateFamilyTable(objPerson.getObjFamilyMemberDirectory().getFamilyMemberList());

        } else {
            JOptionPane.showMessageDialog(null, "Please select again");
        }
    }//GEN-LAST:event_removeFmJButtonActionPerformed

    private void backJButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButton2ActionPerformed

        CardLayoutContainer.removeCurrentCardLayout(userProcessContainer, this);
    }//GEN-LAST:event_backJButton2ActionPerformed

    private void ppIntIdJTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ppIntIdJTextFieldFocusLost

        boolean intlIDExists = false;
        String intlIDEntered = ppIntIdJTextField.getText();;

        intlIDExists = InternationalIDExists.userIDCheck(objWorldEnterprise, intlIDEntered);

        if (intlIDExists) {
            JOptionPane.showMessageDialog(null, "International ID with this number already exists in organization database. Please check again");
            ppIntIdJTextField.setText(null);
        }
    }//GEN-LAST:event_ppIntIdJTextFieldFocusLost

    private void fmIntIdJTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fmIntIdJTextFieldFocusLost

        boolean intlIDExists = false;
        String intlIDEntered = fmIntIdJTextField.getText();

        if (ppIntIdJTextField.getText().equalsIgnoreCase(fmIntIdJTextField.getText())) {
            JOptionPane.showMessageDialog(null, "International ID of Main member and family members cannot be same");
        } else {
            intlIDExists = InternationalIDExists.userIDCheck(objWorldEnterprise, intlIDEntered);

            if (intlIDExists) {
                JOptionPane.showMessageDialog(null, "International ID with this number already exists in organization database. Please check again");
                fmIntIdJTextField.setText(null);
            }
        }
    }//GEN-LAST:event_fmIntIdJTextFieldFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel add1JLabel;
    private javax.swing.JLabel add2JLabel;
    private javax.swing.JButton addFmJButton;
    private javax.swing.JButton backJButton2;
    private javax.swing.JLabel cityJLabel;
    private javax.swing.JLabel countryJLabel;
    private javax.swing.JLabel dobJLabel;
    private javax.swing.JLabel fDobJLabel;
    private javax.swing.JLabel fIdJLabel;
    private javax.swing.JLabel fNameJLabel;
    private javax.swing.JLabel fSexJLabel;
    private javax.swing.JLabel firNameJLabel;
    private javax.swing.JButton fmDobJButton;
    private javax.swing.JTextField fmDobJTextField;
    private javax.swing.JTextField fmFirstNameJTextField;
    private javax.swing.JTextField fmIntIdJTextField;
    private javax.swing.JTable fmJTable;
    private javax.swing.JTextField fmLastNameJTextField;
    private javax.swing.JComboBox fmRelationJComboBox;
    private javax.swing.JComboBox fmSexJComboBox;
    private javax.swing.JLabel hConJLabel;
    private javax.swing.JLabel hLatJLabel;
    private javax.swing.JLabel hLonJLabel;
    private javax.swing.JLabel hTypeJLabel;
    private javax.swing.JComboBox houseConditionJComboBox;
    private javax.swing.JTextField houseLatJTextField;
    private javax.swing.JTextField houseLonJTextField;
    private javax.swing.JComboBox houseTypeJComboBox;
    private javax.swing.JLabel idJLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lNameJLabel;
    private javax.swing.JLabel lastNameJLabel;
    private javax.swing.JLabel pinJLabel;
    private javax.swing.JTextField ppAdd1JTextField;
    private javax.swing.JTextField ppAdd2JTextField;
    private javax.swing.JTextField ppCityJTextField;
    private javax.swing.JTextField ppCountryJTextField;
    private javax.swing.JButton ppDobJButton;
    private javax.swing.JTextField ppDobJTextField;
    private javax.swing.JTextField ppFirstNameJTextField;
    private javax.swing.JTextField ppIntIdJTextField;
    private javax.swing.JTextField ppLastNameJTextField;
    private javax.swing.JTextField ppPinCodeJTextField;
    private javax.swing.JComboBox ppSexJComboBox;
    private javax.swing.JTextField ppStateJTextField;
    private javax.swing.JLabel relationJLabel;
    private javax.swing.JButton removeFmJButton;
    private javax.swing.JLabel sexJLabel;
    private javax.swing.JLabel stateJLabel;
    private javax.swing.JButton submitJButton;
    private javax.swing.JLabel title2JLabel;
    private javax.swing.JLabel title3JLabel;
    private javax.swing.JLabel title5JLabel;
    private javax.swing.JLabel titleJLabel;
    // End of variables declaration//GEN-END:variables
}
