/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.FieldExpertRole;

import Business.CountryEnterprise.CountryEnterprise;
import Business.Helper.CardLayoutContainer;
import Business.Helper.Validation;
import Business.Organization.FieldAgentOrganization;
import Business.Organization.Organization;
import Business.Person.FieldExpert.FieldDrive;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.FieldDriveWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.JXDatePicker;

/**
 *
 * @author "Smit Shah, NUID: 001748537, AED - Final Project"
 */
public class AddNewFieldDriveJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AddNewFieldDriveJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount objFieldExpertUserAccount;
    private CountryEnterprise objCountryEnterprise;
    private Organization objOrganization;
    private Date startDate;
    private Date endDate;
    private String fieldDriveName, country, state, village, strStartDate = null, strEndDate = null;
    private ArrayList<UserAccount> availableFiledAgentList;
    private ArrayList<UserAccount> selectedFiledAgentList;

    public AddNewFieldDriveJPanel(JPanel userProcessContainerPassed, UserAccount objUserAccountPassed,
            CountryEnterprise objCountryEnterprisePassed, Organization objOrganizationPassed) {
        initComponents();

        this.userProcessContainer = userProcessContainerPassed;
        this.objFieldExpertUserAccount = objUserAccountPassed;
        this.objCountryEnterprise = objCountryEnterprisePassed;
        this.objOrganization = objOrganizationPassed;
        this.country = this.objCountryEnterprise.getCountryEntName();
        this.availableFiledAgentList = new ArrayList<>();
        this.selectedFiledAgentList = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        driveEndDateTextField = new javax.swing.JTextField();
        generateJButton = new javax.swing.JButton();
        driveNameTextField = new javax.swing.JTextField();
        dateStartJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        availableFieldAgentJTable = new javax.swing.JTable();
        dateEndJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        assignedFieldAgentJTable = new javax.swing.JTable();
        title2JLabel = new javax.swing.JLabel();
        title3JLabel = new javax.swing.JLabel();
        addJButton = new javax.swing.JButton();
        stateJLabel = new javax.swing.JLabel();
        driveStateTextField = new javax.swing.JTextField();
        villageJLabel = new javax.swing.JLabel();
        titelJLabel = new javax.swing.JLabel();
        driveVillageTextField = new javax.swing.JTextField();
        sDateJLabel = new javax.swing.JLabel();
        driveStartDateTextField = new javax.swing.JTextField();
        eDateJLabel = new javax.swing.JLabel();
        removeJButton = new javax.swing.JButton();
        driveJLabel = new javax.swing.JLabel();
        submitJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        driveEndDateTextField.setEditable(false);
        driveEndDateTextField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        generateJButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        generateJButton.setText("Generate Available Filed Agents");
        generateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateJButtonActionPerformed(evt);
            }
        });

        driveNameTextField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        dateStartJButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        dateStartJButton.setText("Start Date");
        dateStartJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateStartJButtonActionPerformed(evt);
            }
        });

        availableFieldAgentJTable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        availableFieldAgentJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Agent ID", "Agent Name", "User Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(availableFieldAgentJTable);
        if (availableFieldAgentJTable.getColumnModel().getColumnCount() > 0) {
            availableFieldAgentJTable.getColumnModel().getColumn(0).setResizable(false);
            availableFieldAgentJTable.getColumnModel().getColumn(1).setResizable(false);
            availableFieldAgentJTable.getColumnModel().getColumn(2).setResizable(false);
        }

        dateEndJButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        dateEndJButton.setText("End Date");
        dateEndJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateEndJButtonActionPerformed(evt);
            }
        });

        backJButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        assignedFieldAgentJTable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        assignedFieldAgentJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Agent ID", "Agent Name", "User Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(assignedFieldAgentJTable);
        if (assignedFieldAgentJTable.getColumnModel().getColumnCount() > 0) {
            assignedFieldAgentJTable.getColumnModel().getColumn(0).setResizable(false);
            assignedFieldAgentJTable.getColumnModel().getColumn(1).setResizable(false);
            assignedFieldAgentJTable.getColumnModel().getColumn(2).setResizable(false);
        }

        title2JLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        title2JLabel.setText("Available Filed Agents");

        title3JLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        title3JLabel.setText("Assigned Filed Agents");

        addJButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        addJButton.setText("Add Filed Agent");
        addJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJButtonActionPerformed(evt);
            }
        });

        stateJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        stateJLabel.setText("State");

        driveStateTextField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        villageJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        villageJLabel.setText("Village");

        titelJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        titelJLabel.setText("Filed Drive Details");

        driveVillageTextField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        driveVillageTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                driveVillageTextFieldActionPerformed(evt);
            }
        });

        sDateJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        sDateJLabel.setText("Start Date");

        driveStartDateTextField.setEditable(false);
        driveStartDateTextField.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        eDateJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        eDateJLabel.setText("End Date");

        removeJButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        removeJButton.setText("Remove Filed Agent");
        removeJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeJButtonActionPerformed(evt);
            }
        });

        driveJLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        driveJLabel.setText("Field Drive Name");

        submitJButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        submitJButton.setText("Add Drive");
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(413, 413, 413)
                                        .addComponent(addJButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(61, 61, 61)
                                        .addComponent(jScrollPane1)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(124, 124, 124)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(driveJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(34, 34, 34)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(titelJLabel)
                                                .addComponent(driveNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(villageJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(34, 34, 34)
                                                    .addComponent(driveVillageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(stateJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(34, 34, 34)
                                                    .addComponent(driveStateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(sDateJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(34, 34, 34)
                                                    .addComponent(driveStartDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(dateStartJButton))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(eDateJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(34, 34, 34)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(title2JLabel)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(driveEndDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(dateEndJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                    .addComponent(generateJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGap(255, 255, 255)
                                    .addComponent(removeJButton)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(236, 236, 236)
                                .addComponent(submitJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(title3JLabel)
                                    .addGap(135, 135, 135)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(backJButton)))
                .addContainerGap(164, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(titelJLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(driveJLabel)
                    .addComponent(driveNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stateJLabel)
                    .addComponent(driveStateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(villageJLabel)
                    .addComponent(driveVillageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sDateJLabel)
                    .addComponent(driveStartDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateStartJButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eDateJLabel)
                    .addComponent(driveEndDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateEndJButton))
                .addGap(18, 18, 18)
                .addComponent(generateJButton)
                .addGap(42, 42, 42)
                .addComponent(title2JLabel)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addJButton)
                .addGap(33, 33, 33)
                .addComponent(title3JLabel)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeJButton)
                .addGap(23, 23, 23)
                .addComponent(submitJButton)
                .addGap(34, 34, 34)
                .addComponent(backJButton)
                .addGap(30, 30, 30))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void generateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateJButtonActionPerformed

        //Validation
        boolean validationSuccess;
        validationSuccess = validation();

        if (validationSuccess) {

            FieldAgentOrganization objFieldAgentOrganization = null;
            this.availableFiledAgentList = new ArrayList<>();
            this.selectedFiledAgentList = new ArrayList<>();
            populateSelectedAgent(selectedFiledAgentList);

            Date todayDate = new Date();
            if (startDate.before(endDate)) {

                if (startDate.after(todayDate)) {

                    for (Organization objOrganization : objCountryEnterprise.getObjOrganizationDirectory().getOrganizationList()) {

                        if (objOrganization.getClass().getSimpleName().equals(Organization.OrganizationType.FieldAgent.getValue())) {

                            objFieldAgentOrganization = (FieldAgentOrganization) objOrganization;
                        }
                    }

                    if (objFieldAgentOrganization != null) {

                        for (UserAccount objUserAccount : objFieldAgentOrganization.getObjUserAccountDirectory().getUserAccountList()) {

                            boolean isAvailable = false;

                            int size = objUserAccount.getObjWorkQueue().getWorkRequestList().size();

                            if (size > 0) {

                                label:
                                for (WorkRequest objWorkRequest : objUserAccount.getObjWorkQueue().getWorkRequestList()) {

                                    if (objWorkRequest instanceof FieldDriveWorkRequest) {

                                        FieldDriveWorkRequest objFieldDriveWorkRequest = (FieldDriveWorkRequest) objWorkRequest;

                                        if (!(startDate.after(objFieldDriveWorkRequest.getDriveStartDate())
                                                && startDate.before(objFieldDriveWorkRequest.getDriveEndDate()))) {
                                            if (!(endDate.after(objFieldDriveWorkRequest.getDriveStartDate())
                                                    && endDate.before(objFieldDriveWorkRequest.getDriveEndDate()))) {
                                                if (!(startDate.equals(objFieldDriveWorkRequest.getDriveStartDate())
                                                        || startDate.equals(objFieldDriveWorkRequest.getDriveEndDate())
                                                        || endDate.equals(objFieldDriveWorkRequest.getDriveStartDate())
                                                        || endDate.equals(objFieldDriveWorkRequest.getDriveEndDate()))) {

                                                    isAvailable = true;
                                                //break label;
                                                    //availableFiledAgentList.add(objUserAccount);
                                                } else {
                                                    isAvailable = false;
                                                    break label;
                                                }

                                            } else {
                                                isAvailable = false;
                                                break label;
                                            }
                                        } else {
                                            isAvailable = false;
                                            break label;
                                        }
                                    }
                                }
                            } else {
                                isAvailable = true;
                            }

                            if (isAvailable) {
                                availableFiledAgentList.add(objUserAccount);
                            }
                        }
                    }

                    //Populate table
                    if (availableFiledAgentList.size() > 0) {
                        populateAvailableAgent(availableFiledAgentList);
                    } else {
                        JOptionPane.showMessageDialog(null, "No field agents are available for the selected date");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please select future dates");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please select appropriate start and end date");
            }
        }
    }//GEN-LAST:event_generateJButtonActionPerformed

    private void dateStartJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateStartJButtonActionPerformed

        JFrame frame = new JFrame("Select Date");
        JPanel panel = new JPanel();

        frame.setBounds(400, 400, 250, 100);

        JXDatePicker picker = new JXDatePicker();
        picker.setDate(Calendar.getInstance().getTime());
        SimpleDateFormat objSimpleDateFormat = new SimpleDateFormat("MM/dd/yyyy");
        picker.setFormats(objSimpleDateFormat);

        panel.add(picker);
        frame.getContentPane().add(panel);
        frame.setVisible(true);

        picker.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {

                startDate = picker.getDate();
                strStartDate = objSimpleDateFormat.format(startDate);
                driveStartDateTextField.setText(strStartDate);
            }
        });

    }//GEN-LAST:event_dateStartJButtonActionPerformed

    private void populateAvailableAgent(ArrayList<UserAccount> userAccountList) {

        DefaultTableModel dtm = (DefaultTableModel) availableFieldAgentJTable.getModel();
        dtm.setRowCount(0);

        for (UserAccount objUserAccount : userAccountList) {

            Object row[] = new Object[3];
            row[0] = objUserAccount.getObjPerson().getPersonID();
            row[1] = objUserAccount.getObjPerson();
            row[2] = objUserAccount;

            dtm.addRow(row);
        }
    }

    private void populateSelectedAgent(ArrayList<UserAccount> userAccountList) {

        DefaultTableModel dtm = (DefaultTableModel) assignedFieldAgentJTable.getModel();
        dtm.setRowCount(0);

        for (UserAccount objUserAccount : userAccountList) {

            Object row[] = new Object[3];
            row[0] = objUserAccount.getObjPerson().getPersonID();
            row[1] = objUserAccount.getObjPerson();
            row[2] = objUserAccount;

            dtm.addRow(row);
        }
    }


    private void dateEndJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateEndJButtonActionPerformed

        JFrame frame = new JFrame("Select Date");
        JPanel panel = new JPanel();

        frame.setBounds(400, 400, 250, 100);

        JXDatePicker picker = new JXDatePicker();
        picker.setDate(Calendar.getInstance().getTime());
        SimpleDateFormat objSimpleDateFormat = new SimpleDateFormat("MM/dd/yyyy");
        picker.setFormats(objSimpleDateFormat);

        panel.add(picker);
        frame.getContentPane().add(panel);
        frame.setVisible(true);

        picker.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {

                SimpleDateFormat objSimpleDateFormat = new SimpleDateFormat("MM/dd/yyyy");
                picker.setFormats(objSimpleDateFormat);

                endDate = picker.getDate();
                strEndDate = objSimpleDateFormat.format(endDate);
                driveEndDateTextField.setText(strEndDate);
            }
        });

    }//GEN-LAST:event_dateEndJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        CardLayoutContainer.removeCurrentCardLayout(userProcessContainer, this);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void addJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJButtonActionPerformed

        UserAccount objUserAccount;

        int selectedUser = availableFieldAgentJTable.getSelectedRow();

        if (selectedUser < 0) {
            JOptionPane.showMessageDialog(null, "Please select a Agent");
            return;
        }

        objUserAccount = (UserAccount) availableFieldAgentJTable.getValueAt(selectedUser, 2);;

        if (objUserAccount != null) {

            selectedFiledAgentList.add(objUserAccount);
            populateSelectedAgent(selectedFiledAgentList);

            availableFiledAgentList.remove(objUserAccount);
            populateAvailableAgent(availableFiledAgentList);

            JOptionPane.showMessageDialog(null, "One agent added successfully");

        } else {
            JOptionPane.showMessageDialog(null, "Please select again");
        }
    }//GEN-LAST:event_addJButtonActionPerformed

    private void removeJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeJButtonActionPerformed

        UserAccount objUserAccount;

        int selectedUser = assignedFieldAgentJTable.getSelectedRow();

        if (selectedUser < 0) {
            JOptionPane.showMessageDialog(null, "Please select a Agent");
            return;
        }

        objUserAccount = (UserAccount) assignedFieldAgentJTable.getValueAt(selectedUser, 2);;

        if (objUserAccount != null) {

            selectedFiledAgentList.remove(objUserAccount);
            populateSelectedAgent(selectedFiledAgentList);

            availableFiledAgentList.add(objUserAccount);
            populateAvailableAgent(availableFiledAgentList);

            JOptionPane.showMessageDialog(null, "One agent removed successfully");

        } else {
            JOptionPane.showMessageDialog(null, "Please select again");
        }
    }//GEN-LAST:event_removeJButtonActionPerformed

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed

        FieldDrive objFieldDrive = null;
        //Validation
        boolean validationSuccess;
        validationSuccess = validation();

        if (validationSuccess) {

            if (selectedFiledAgentList.size() > 0) {

                objFieldDrive = objFieldExpertUserAccount.getObjPerson().getObjFieldDriveDirectory().addNewFieldDrive();

                if (objFieldDrive != null) {
                    objFieldDrive.setFieldDriveName(fieldDriveName);
                    objFieldDrive.setFieldDriveCountry(country);
                    objFieldDrive.setFieldDriveState(state);
                    objFieldDrive.setFieldDriveVillage(village);
                    objFieldDrive.setDriveStartDate(startDate);
                    objFieldDrive.setDriveEndDate(endDate);
                    objFieldDrive.setObjFieldExpertUserAccount(objFieldExpertUserAccount);
                    objFieldDrive.setFieldAgentAssignedList(selectedFiledAgentList);

                    JOptionPane.showMessageDialog(null, "Drive added successfully");

                    //Send WorkQueue to each assigned Field Agent
                    for (UserAccount objUserAccount : selectedFiledAgentList) {

                        FieldDriveWorkRequest objFieldDriveWorkRequest = new FieldDriveWorkRequest();
                        objUserAccount.getObjWorkQueue().getWorkRequestList().add(objFieldDriveWorkRequest);

                        objFieldDriveWorkRequest.setDriveStartDate(startDate);
                        objFieldDriveWorkRequest.setDriveEndDate(endDate);
                        objFieldDriveWorkRequest.setObjFieldDrive(objFieldDrive);
                        objFieldDriveWorkRequest.setReceiver(objUserAccount);
                        objFieldDriveWorkRequest.setSender(objFieldExpertUserAccount);
                        objFieldDriveWorkRequest.setStatus(WorkRequest.WorkRequestStatus.ASSIGNED.getValue());
                        objFieldDriveWorkRequest.setMessage("NEW DRIVE ASSIGNED");
                    }

                    CardLayoutContainer.removeCurrentCardLayout(userProcessContainer, this);

                } else {
                    JOptionPane.showMessageDialog(null, "Please add the drive again");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please assign field agents to drive");
            }
        }
    }//GEN-LAST:event_submitJButtonActionPerformed

    private void driveVillageTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_driveVillageTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_driveVillageTextFieldActionPerformed

    private boolean validation() {

        fieldDriveName = driveNameTextField.getText().trim();
        state = driveStateTextField.getText().trim();
        village = driveVillageTextField.getText().trim();

        if (Validation.checkForNull(fieldDriveName)) {
            JOptionPane.showMessageDialog(null, "Please enter filed drive name");
            driveNameTextField.requestFocus();
            return false;
        }

        if (Validation.checkForOnlyAlphabets(fieldDriveName)) {
            JOptionPane.showMessageDialog(null, "Please enter proper filed drive name. It should contain only alphabets");
            driveNameTextField.requestFocus();
            return false;
        }

        if (Validation.checkForNull(state)) {
            JOptionPane.showMessageDialog(null, "Please enter state");
            driveStateTextField.requestFocus();
            return false;
        }

        if (Validation.checkForOnlyAlphabets(state)) {
            JOptionPane.showMessageDialog(null, "Please enter proper state name. It should contain only alphabets");
            driveStateTextField.requestFocus();
            return false;
        }

        if (Validation.checkForNull(village)) {
            JOptionPane.showMessageDialog(null, "Please enter village/city");
            driveVillageTextField.requestFocus();
            return false;
        }

        if (Validation.checkForOnlyAlphabets(village)) {
            JOptionPane.showMessageDialog(null, "Please enter proper village/city name. It should contain only alphabets");
            driveVillageTextField.requestFocus();
            return false;
        }

        if (Validation.checkForNull(driveStartDateTextField.getText().trim())) {
            JOptionPane.showMessageDialog(null, "Please select drive start date");
            dateStartJButton.doClick();
            return false;
        }

        if (Validation.checkForNull(driveEndDateTextField.getText().trim())) {
            JOptionPane.showMessageDialog(null, "Please select drive end date");
            dateEndJButton.doClick();
            return false;
        }

        return true;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addJButton;
    private javax.swing.JTable assignedFieldAgentJTable;
    private javax.swing.JTable availableFieldAgentJTable;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton dateEndJButton;
    private javax.swing.JButton dateStartJButton;
    private javax.swing.JTextField driveEndDateTextField;
    private javax.swing.JLabel driveJLabel;
    private javax.swing.JTextField driveNameTextField;
    private javax.swing.JTextField driveStartDateTextField;
    private javax.swing.JTextField driveStateTextField;
    private javax.swing.JTextField driveVillageTextField;
    private javax.swing.JLabel eDateJLabel;
    private javax.swing.JButton generateJButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton removeJButton;
    private javax.swing.JLabel sDateJLabel;
    private javax.swing.JLabel stateJLabel;
    private javax.swing.JButton submitJButton;
    private javax.swing.JLabel titelJLabel;
    private javax.swing.JLabel title2JLabel;
    private javax.swing.JLabel title3JLabel;
    private javax.swing.JLabel villageJLabel;
    // End of variables declaration//GEN-END:variables
}
